/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica14;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ButtonModel;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import sm.image.KernelProducer;
import sm.mks.ui.lienzo;
import sm.mks.ui.Figura;
import java.awt.Shape;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import sm.image.LookupTableProducer;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.ColorConvertOp;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.nio.file.DirectoryStream.Filter;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JInternalFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.mks.audio.Temporizador;
import sm.mks.ui.LienzoAdapter;
import sm.mks.ui.LienzoEvent;
import sm.mks.imagen.PosterizarOp;
import sm.mks.imagen.RojoOp;
import sm.mks.imagen.ToneChangerOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author morad
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    private lienzo lienzo;
    private BufferedImage imgFuente = null;
    private BufferedImage imgFuente2 = null;
    private int a, b;
    private SMClipPlayer player = null;
    private SMSoundRecorder recorder = null;
    private JFileChooser dlg;
    private Temporizador tiempo;
    private Boolean pausar;
    private Boolean renaudar;
    private Temporizador tiempoPlay;
    private String ultimoFoco;

    public VentanaPrincipal() {
        initComponents();
        this.setSize(1700, 700);
        lista.setModel(new DefaultListModel());
        dlg = new JFileChooser();

        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Im√°genesAudioVideo",
                "png", "jpg", "au", "wav",
                "mp4", "avi", "mpg");
        dlg.setFileFilter(filtro);

        tiempo = new Temporizador(this.lRecordTiempo);
        pausar = false;
        renaudar = false;
        tiempoPlay = new Temporizador(this.jPlayTiempo);
    }

    public lienzo getLienzoSeleccionado() {
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        figura = new javax.swing.ButtonGroup();
        FormasDibujado = new javax.swing.JToolBar();
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        nuevo = new javax.swing.JButton();
        abrir = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        trazo = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        curva = new javax.swing.JToggleButton();
        cara = new javax.swing.JToggleButton();
        mover = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        colores = new javax.swing.JPanel();
        negro = new javax.swing.JButton();
        rojo = new javax.swing.JButton();
        azul = new javax.swing.JButton();
        amarillo = new javax.swing.JButton();
        verde = new javax.swing.JButton();
        blanco = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        relleno = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        alisado = new javax.swing.JToggleButton();
        grosor = new javax.swing.JSpinner();
        jPanel15 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        play = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        listaResproduccion = new javax.swing.JComboBox<>();
        jPlayTiempo = new javax.swing.JLabel();
        record = new javax.swing.JButton();
        lRecordTiempo = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        camara = new javax.swing.JButton();
        instantanea = new javax.swing.JButton();
        barraEstado = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        brillo = new javax.swing.JSlider();
        contraste = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        filtros = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        contrast = new javax.swing.JPanel();
        normal = new javax.swing.JButton();
        iluminar = new javax.swing.JButton();
        oscurecer = new javax.swing.JButton();
        cuadratica = new javax.swing.JButton();
        lineal = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        l1 = new javax.swing.JSlider();
        l2 = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        rotar = new javax.swing.JButton();
        aumentar = new javax.swing.JButton();
        disminuir = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        combinar = new javax.swing.JButton();
        bandas = new javax.swing.JButton();
        espacioColor = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        tintar = new javax.swing.JButton();
        sepia = new javax.swing.JButton();
        equalizar = new javax.swing.JButton();
        rojoOp = new javax.swing.JButton();
        posterizar = new javax.swing.JSlider();
        tChangerOp = new javax.swing.JSlider();
        jSplitPane1 = new javax.swing.JSplitPane();
        escritorio = new javax.swing.JDesktopPane();
        jPanel8 = new javax.swing.JPanel();
        lista = new javax.swing.JList<>();
        jPanel9 = new javax.swing.JPanel();
        volcar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        AffineTransformOp = new javax.swing.JMenuItem();
        LookUpOp = new javax.swing.JMenuItem();
        bandCombineOp = new javax.swing.JMenuItem();
        colorConvertOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        FormasDibujado.setRollover(true);

        jPanel14.setLayout(new java.awt.BorderLayout());

        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        jPanel16.add(nuevo);

        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jPanel16.add(abrir);

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        jPanel16.add(guardar);
        jPanel16.add(jSeparator3);

        figura.add(trazo);
        trazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazo.png"))); // NOI18N
        trazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        trazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoActionPerformed(evt);
            }
        });
        jPanel16.add(trazo);

        figura.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        jPanel16.add(linea);

        figura.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloActionPerformed(evt);
            }
        });
        jPanel16.add(rectangulo);

        figura.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        elipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseActionPerformed(evt);
            }
        });
        jPanel16.add(elipse);

        figura.add(curva);
        curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva.png"))); // NOI18N
        curva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaActionPerformed(evt);
            }
        });
        jPanel16.add(curva);

        figura.add(cara);
        cara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/smile.png"))); // NOI18N
        cara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caraActionPerformed(evt);
            }
        });
        jPanel16.add(cara);

        figura.add(mover);
        mover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        mover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverActionPerformed(evt);
            }
        });
        jPanel16.add(mover);
        jPanel16.add(jSeparator1);

        colores.setPreferredSize(new java.awt.Dimension(100, 50));
        colores.setLayout(new java.awt.GridLayout(2, 3));

        negro.setBackground(new java.awt.Color(0, 0, 0));
        negro.setMaximumSize(new java.awt.Dimension(5, 5));
        negro.setMinimumSize(new java.awt.Dimension(5, 5));
        negro.setPreferredSize(new java.awt.Dimension(5, 5));
        negro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negroActionPerformed(evt);
            }
        });
        colores.add(negro);

        rojo.setBackground(new java.awt.Color(255, 0, 0));
        rojo.setMaximumSize(new java.awt.Dimension(5, 5));
        rojo.setMinimumSize(new java.awt.Dimension(5, 5));
        rojo.setPreferredSize(new java.awt.Dimension(5, 5));
        rojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoActionPerformed(evt);
            }
        });
        colores.add(rojo);

        azul.setBackground(new java.awt.Color(0, 0, 255));
        azul.setMaximumSize(new java.awt.Dimension(5, 5));
        azul.setMinimumSize(new java.awt.Dimension(5, 5));
        azul.setPreferredSize(new java.awt.Dimension(5, 5));
        azul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azulActionPerformed(evt);
            }
        });
        colores.add(azul);

        amarillo.setBackground(new java.awt.Color(255, 255, 51));
        amarillo.setMaximumSize(new java.awt.Dimension(5, 5));
        amarillo.setMinimumSize(new java.awt.Dimension(5, 5));
        amarillo.setPreferredSize(new java.awt.Dimension(5, 5));
        amarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amarilloActionPerformed(evt);
            }
        });
        colores.add(amarillo);

        verde.setBackground(new java.awt.Color(51, 255, 51));
        verde.setMaximumSize(new java.awt.Dimension(5, 5));
        verde.setMinimumSize(new java.awt.Dimension(5, 5));
        verde.setPreferredSize(new java.awt.Dimension(5, 5));
        verde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verdeActionPerformed(evt);
            }
        });
        colores.add(verde);

        blanco.setBackground(new java.awt.Color(204, 204, 204));
        blanco.setFont(new java.awt.Font("Cantarell", 0, 8)); // NOI18N
        blanco.setForeground(new java.awt.Color(51, 51, 51));
        blanco.setText("+");
        blanco.setMaximumSize(new java.awt.Dimension(5, 5));
        blanco.setMinimumSize(new java.awt.Dimension(5, 5));
        blanco.setPreferredSize(new java.awt.Dimension(5, 5));
        blanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blancoActionPerformed(evt);
            }
        });
        colores.add(blanco);

        jPanel16.add(colores);
        jPanel16.add(jSeparator2);

        relleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        relleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        relleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });
        jPanel16.add(relleno);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        jPanel16.add(transparencia);

        alisado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisadoActionPerformed(evt);
            }
        });
        jPanel16.add(alisado);

        grosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        grosor.setMinimumSize(new java.awt.Dimension(68, 40));
        grosor.setPreferredSize(new java.awt.Dimension(68, 30));
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });
        jPanel16.add(grosor);

        jPanel14.add(jPanel16, java.awt.BorderLayout.PAGE_START);

        jPanel15.setLayout(new java.awt.BorderLayout());

        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/play24x24.png"))); // NOI18N
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        jPanel17.add(play);

        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/stop24x24.png"))); // NOI18N
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });
        jPanel17.add(stop);

        jPanel17.add(listaResproduccion);

        jPlayTiempo.setText("00:00");
        jPanel17.add(jPlayTiempo);

        record.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/record24x24.png"))); // NOI18N
        record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordActionPerformed(evt);
            }
        });
        jPanel17.add(record);

        lRecordTiempo.setText("00:00");
        jPanel17.add(lRecordTiempo);
        jPanel17.add(jSeparator4);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaVideo/Camara.png"))); // NOI18N
        camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraActionPerformed(evt);
            }
        });
        jPanel17.add(camara);

        instantanea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaVideo/Capturar.png"))); // NOI18N
        instantanea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instantaneaActionPerformed(evt);
            }
        });
        jPanel17.add(instantanea);

        jPanel15.add(jPanel17, java.awt.BorderLayout.WEST);

        jPanel14.add(jPanel15, java.awt.BorderLayout.PAGE_END);

        FormasDibujado.add(jPanel14);

        getContentPane().add(FormasDibujado, java.awt.BorderLayout.PAGE_START);

        barraEstado.setText("Barra de estado");
        getContentPane().add(barraEstado, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Brillo y contraste");
        jPanel2.add(jLabel1, java.awt.BorderLayout.NORTH);

        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setValue(0);
        brillo.setName("brillo"); // NOI18N
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloFocusLost(evt);
            }
        });
        jPanel2.add(brillo, java.awt.BorderLayout.WEST);

        contraste.setMaximum(20);
        contraste.setMinimum(-20);
        contraste.setToolTipText("");
        contraste.setValue(0);
        contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteStateChanged(evt);
            }
        });
        contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteFocusLost(evt);
            }
        });
        jPanel2.add(contraste, java.awt.BorderLayout.EAST);

        jToolBar1.add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        filtros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras", "E.Horizontal", "E.Horizontal2", "E.Horizontal3" }));
        filtros.setToolTipText("Filtro");
        filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrosActionPerformed(evt);
            }
        });
        jPanel3.add(filtros, java.awt.BorderLayout.EAST);

        jLabel2.setText("Filtro");
        jPanel3.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jToolBar1.add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Transformaciones");
        jPanel4.add(jLabel3, java.awt.BorderLayout.NORTH);

        normal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/contraste.png"))); // NOI18N
        normal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalActionPerformed(evt);
            }
        });
        contrast.add(normal);

        iluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/iluminar.png"))); // NOI18N
        iluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarActionPerformed(evt);
            }
        });
        contrast.add(iluminar);

        oscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/oscurecer.png"))); // NOI18N
        oscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerActionPerformed(evt);
            }
        });
        contrast.add(oscurecer);

        cuadratica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/cuadratica.png"))); // NOI18N
        cuadratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadraticaActionPerformed(evt);
            }
        });
        contrast.add(cuadratica);

        lineal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/lineal.png"))); // NOI18N
        lineal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linealActionPerformed(evt);
            }
        });
        contrast.add(lineal);

        jPanel6.setLayout(new java.awt.GridLayout(2, 1));

        l1.setMaximum(255);
        l1.setValue(128);
        l1.setEnabled(false);
        l1.setPreferredSize(new java.awt.Dimension(100, 22));
        l1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                l1StateChanged(evt);
            }
        });
        jPanel6.add(l1);

        l2.setMaximum(255);
        l2.setValue(128);
        l2.setEnabled(false);
        l2.setPreferredSize(new java.awt.Dimension(100, 22));
        l2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                l2StateChanged(evt);
            }
        });
        jPanel6.add(l2);

        contrast.add(jPanel6);

        jPanel4.add(contrast, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Rotaci√≥n y escalado");
        jPanel5.add(jLabel4, java.awt.BorderLayout.NORTH);

        rotar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/rotacion180.png"))); // NOI18N
        rotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotarActionPerformed(evt);
            }
        });
        jPanel7.add(rotar);

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/aumentar.png"))); // NOI18N
        aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarActionPerformed(evt);
            }
        });
        jPanel7.add(aumentar);

        disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/disminuir.png"))); // NOI18N
        disminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirActionPerformed(evt);
            }
        });
        jPanel7.add(disminuir);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel5);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Color");
        jPanel10.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        combinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/combinar.png"))); // NOI18N
        combinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinarActionPerformed(evt);
            }
        });
        jPanel11.add(combinar);

        bandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/bandas.png"))); // NOI18N
        bandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandasActionPerformed(evt);
            }
        });
        jPanel11.add(bandas);

        espacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "GREY" }));
        espacioColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espacioColorActionPerformed(evt);
            }
        });
        jPanel11.add(espacioColor);

        jPanel10.add(jPanel11, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel10);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jLabel6.setText("Op. Creaci√≥n propia");
        jPanel13.add(jLabel6, java.awt.BorderLayout.PAGE_START);

        tintar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/tintar.png"))); // NOI18N
        tintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintarActionPerformed(evt);
            }
        });
        jPanel12.add(tintar);

        sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/sepia.png"))); // NOI18N
        sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaActionPerformed(evt);
            }
        });
        jPanel12.add(sepia);

        equalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/ecualizar.png"))); // NOI18N
        equalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizarActionPerformed(evt);
            }
        });
        jPanel12.add(equalizar);

        rojoOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica12/rojo.png"))); // NOI18N
        rojoOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoOpActionPerformed(evt);
            }
        });
        jPanel12.add(rojoOp);

        posterizar.setMaximum(20);
        posterizar.setMinimum(2);
        posterizar.setValue(2);
        posterizar.setPreferredSize(new java.awt.Dimension(100, 22));
        posterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                posterizarStateChanged(evt);
            }
        });
        posterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                posterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                posterizarFocusLost(evt);
            }
        });
        jPanel12.add(posterizar);

        tChangerOp.setMaximum(360);
        tChangerOp.setValue(0);
        tChangerOp.setPreferredSize(new java.awt.Dimension(100, 22));
        tChangerOp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tChangerOpStateChanged(evt);
            }
        });
        tChangerOp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tChangerOpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tChangerOpFocusLost(evt);
            }
        });
        jPanel12.add(tChangerOp);

        jPanel13.add(jPanel12, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel13);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setDividerLocation(1000);
        jSplitPane1.setDividerSize(10);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(escritorio);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel8.add(lista, java.awt.BorderLayout.CENTER);

        jPanel9.setPreferredSize(new java.awt.Dimension(202, 30));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        volcar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica10/volcar.png"))); // NOI18N
        volcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volcarActionPerformed(evt);
            }
        });
        jPanel9.add(volcar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 30));

        jPanel8.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setRightComponent(jPanel8);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        archivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        archivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        archivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        archivo.add(menuGuardar);

        jMenuBar1.add(archivo);

        jMenu1.setText("Imagen");

        AffineTransformOp.setText("AffineTransformOp");
        AffineTransformOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AffineTransformOpActionPerformed(evt);
            }
        });
        jMenu1.add(AffineTransformOp);

        LookUpOp.setText("LookupOp");
        LookUpOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookUpOpActionPerformed(evt);
            }
        });
        jMenu1.add(LookUpOp);

        bandCombineOp.setText("BandCombineOp");
        bandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandCombineOpActionPerformed(evt);
            }
        });
        jMenu1.add(bandCombineOp);

        colorConvertOp.setText("ColorConvertOp");
        colorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpActionPerformed(evt);
            }
        });
        jMenu1.add(colorConvertOp);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: L√≠nea");
        if (lienzo != null)
            this.lienzo.setFigura(Figura.LINEA);
    }//GEN-LAST:event_lineaActionPerformed

    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: Rect√°ngulo");
        if (lienzo != null)
            this.lienzo.setFigura(Figura.RECTANGULO);
    }//GEN-LAST:event_rectanguloActionPerformed

    private void elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: Elipse");
        if (lienzo != null)
            this.lienzo.setFigura(Figura.ELIPSE);
    }//GEN-LAST:event_elipseActionPerformed

    private void negroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negroActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            this.lienzo.setColor(Color.black);
    }//GEN-LAST:event_negroActionPerformed

    private void rojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            this.lienzo.setColor(Color.red);
    }//GEN-LAST:event_rojoActionPerformed

    private void azulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            this.lienzo.setColor(Color.blue);
    }//GEN-LAST:event_azulActionPerformed

    private void blancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blancoActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        if (lienzo != null)
            this.lienzo.setColor(color);
    }//GEN-LAST:event_blancoActionPerformed

    private void amarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amarilloActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            this.lienzo.setColor(Color.yellow);
    }//GEN-LAST:event_amarilloActionPerformed

    private void verdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            this.lienzo.setColor(Color.green);
    }//GEN-LAST:event_verdeActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = new VentanaInternaImagen();
        vi.getLienzo().addLienzoListener(new ManejadorLienzo());
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.white);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo().setImagen(img);
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String extension = this.getExtension(f);

                if (extension.equals("jpg") || extension.equals("png")) {

                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo().addLienzoListener(new ManejadorLienzo());
                    vi.addInternalFrameListener(new ManejadorVentanaInterna());
                    vi.getLienzo().setImagen(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (extension.equals("au") || extension.equals("wav")) {
                    //File f = dlg.getSelectedFile();
                    File fAudio = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listaResproduccion.addItem(fAudio);
                    this.listaResproduccion.setSelectedItem(fAudio);

                } else if (extension.equals("mp4") || extension.equals("avi") || extension.equals("mpg")) {
                    VentanaInternaVideo vc = VentanaInternaVideo.getInstance(f);
                    escritorio.add(vc);
                    vc.setVisible(true);
                }

            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }

    }//GEN-LAST:event_menuGuardarActionPerformed

    private void moverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            if (this.mover.isSelected())
                this.lienzo.setEdicion(true);
    }//GEN-LAST:event_moverActionPerformed

    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            if (this.relleno.isSelected())
                this.lienzo.setRellenado(true);
            else
                this.lienzo.setRellenado(false);
    }//GEN-LAST:event_rellenoActionPerformed

    private void trazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoActionPerformed
        // TODO add your handling code here:

        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: Trazo libre");
        if (lienzo != null) {
            this.lienzo.setFigura(Figura.TLIBRE);
        }

    }//GEN-LAST:event_trazoActionPerformed

    private void curvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: Curva");
        if (lienzo != null)
            this.lienzo.setFigura(Figura.CURVA);
    }//GEN-LAST:event_curvaActionPerformed

    private void caraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caraActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        this.barraEstado.setText("Estado: Cara");
        if (lienzo != null)
            this.lienzo.setFigura(Figura.CARA);
    }//GEN-LAST:event_caraActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null) {
            lienzo.setTransparencia(transparencia.isSelected());
        }

    }//GEN-LAST:event_transparenciaActionPerformed

    private void alisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisadoActionPerformed
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null)
            lienzo.setAlisado(alisado.isSelected());
    }//GEN-LAST:event_alisadoActionPerformed

    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged
        // TODO add your handling code here:
        lienzo = this.getLienzoSeleccionado();
        if (lienzo != null) {
            lienzo.setGrosor(this.grosor.getValue().hashCode());
        }
    }//GEN-LAST:event_grosorStateChanged

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);

            if (img != null) {
                try {
                    int b = this.brillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, b, null);
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloStateChanged

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_brilloFocusGained

    private void brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.brillo.setValue(0);
    }//GEN-LAST:event_brilloFocusLost

    private void contrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

        if (vi != null && imgFuente2 != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);

            if (img != null) {
                try {
                    int c = this.contraste.getValue();
                    RescaleOp rop = new RescaleOp(c, 0, null);
                    rop.filter(imgFuente2, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteStateChanged

    private void contrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusGained
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen(false).isAlphaPremultiplied();
            imgFuente2 = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_contrasteFocusGained

    private void contrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteFocusLost
        // TODO add your handling code here:
        imgFuente2 = null;
        this.brillo.setValue(0);
    }//GEN-LAST:event_contrasteFocusLost

    private void filtrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrosActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            Kernel k = getKernel(this.filtros.getSelectedIndex());
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_filtrosActionPerformed

    private void AffineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AffineTransformOpActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_AffineTransformOpActionPerformed

    private void LookUpOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookUpOpActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x); // Negativo
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    /*BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);*/
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LookUpOpActionPerformed

    private void aplicarLookUp(LookupTable tabla) {
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }
    private void normalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookUp(tabla);

    }//GEN-LAST:event_normalActionPerformed

    private void iluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_iluminarActionPerformed

    private void oscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_oscurecerActionPerformed

    private void cuadraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadraticaActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = fFunction(128);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_cuadraticaActionPerformed

    private void rotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    double r = Math.toRadians(180);
                    Point c = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rotarActionPerformed

    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_aumentarActionPerformed

    private void disminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop = new AffineTransformOp(at, null); //no me deja usar las constantes type y no s√© el por qu√©
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_disminuirActionPerformed

    private void linealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linealActionPerformed
        // TODO add your handling code here:
        if (this.lineal.isSelected()) {
            this.l1.setEnabled(true);
            this.l2.setEnabled(true);
            VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
            if (vi != null) {
                ColorModel cm = vi.getLienzo().getImagen(false).getColorModel();
                WritableRaster raster = vi.getLienzo().getImagen(false).copyData(null);
                boolean alfaPre = vi.getLienzo().getImagen(false).isAlphaPremultiplied();
                imgFuente = new BufferedImage(cm, raster, alfaPre, null);
            }
        } else {
            this.l1.setEnabled(false);
            this.l2.setEnabled(false);
            this.l1.setValue(128);
            this.l2.setValue(128);
            imgFuente = null;
        }


    }//GEN-LAST:event_linealActionPerformed

    private void l1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_l1StateChanged
        // TODO add your handling code here:

        if (l1.isEnabled()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

            if (vi != null && imgFuente != null) {
                BufferedImage img = vi.getLienzo().getImagen(false);

                if (img != null) {
                    try {
                        LookupTable tabla = tFunction(this.l1.getValue(), this.l2.getValue());
                        LookupOp lop = new LookupOp(tabla, null);
                        lop.filter(imgFuente, img); // Imagen origen y destino iguales
                        vi.getLienzo().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }

        }
    }//GEN-LAST:event_l1StateChanged

    private void l2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_l2StateChanged
        // TODO add your handling code here:

        if (this.l2.isEnabled()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
            if (vi != null && imgFuente != null) {
                BufferedImage img = vi.getLienzo().getImagen(false);

                if (img != null) {
                    try {
                        LookupTable tabla = tFunction(this.l1.getValue(), this.l2.getValue());
                        LookupOp lop = new LookupOp(tabla, null);
                        lop.filter(imgFuente, img); // Imagen origen y destino iguales
                        vi.getLienzo().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }


    }//GEN-LAST:event_l2StateChanged

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = new VentanaInternaImagen();
        vi.getLienzo().addLienzoListener(new ManejadorLienzo());
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.white);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo().setImagen(img);
    }//GEN-LAST:event_nuevoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String extension = this.getExtension(f);

                if (extension.equals("jpg") || extension.equals("png")) {

                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo().addLienzoListener(new ManejadorLienzo());
                    vi.addInternalFrameListener(new ManejadorVentanaInterna());
                    vi.getLienzo().setImagen(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (extension.equals("au") || extension.equals("wav")) {
                    //File f = dlg.getSelectedFile();
                    File fAudio = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listaResproduccion.addItem(fAudio);
                    this.listaResproduccion.setSelectedItem(fAudio);

                } else if (extension.equals("mp4") || extension.equals("avi") || extension.equals("mpg")) {
                    VentanaInternaVideo vc = VentanaInternaVideo.getInstance(f);
                    escritorio.add(vc);
                    vc.setVisible(true);
                }

            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        this.jSplitPane1.setDividerLocation(this.getWidth() - (this.getWidth() / 8));
    }//GEN-LAST:event_formComponentResized

    private void volcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volcarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

        if (vi != null) {
            vi.getLienzo().volcarFiguras(lista.getSelectedValuesList());
        }

    }//GEN-LAST:event_volcarActionPerformed

    private void bandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineOpActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bandCombineOpActionPerformed

    private void colorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOpActionPerformed

    private void combinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_combinarActionPerformed

    private void bandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandasActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                    BufferedImage imgBanda = getImageBand(img, i);
                    vi = new VentanaInternaImagen();
                    vi.getLienzo().setImagen(imgBanda);
                    escritorio.add(vi);
                    vi.setTitle("Banda " + i);
                    vi.setVisible(true);
                }

            }
        }
    }//GEN-LAST:event_bandasActionPerformed

    private void espacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacioColorActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                ColorSpace cs = getColorSpace(this.espacioColor.getSelectedIndex());
                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi = new VentanaInternaImagen();
                    vi.getLienzo().setImagen(imgdest);
                    escritorio.add(vi);
                    vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_espacioColorActionPerformed

    private void posterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_posterizarStateChanged
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);

            if (img != null) {
                try {
                    PosterizarOp pOp = new PosterizarOp(this.posterizar.getValue());
                    pOp.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_posterizarStateChanged

    private void posterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarFocusGained
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_posterizarFocusGained

    private void posterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_posterizarFocusLost
        // TODO add your handling code here:
        imgFuente = null;
    }//GEN-LAST:event_posterizarFocusLost

    private void rojoOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoOpActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    RojoOp rOp = new RojoOp(30);
                    rOp.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rojoOpActionPerformed

    private void tintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    TintOp tintado = new TintOp(vi.getLienzo().getColor(), 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_tintarActionPerformed

    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sepiaActionPerformed

    private void equalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizarActionPerformed
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);;
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_equalizarActionPerformed

    private void tChangerOpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tChangerOpStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());

        if (vi != null && imgFuente != null) {
            BufferedImage img = vi.getLienzo().getImagen(false);

            if (img != null) {
                try {
                    ToneChangerOp tChange = new ToneChangerOp(this.tChangerOp.getValue());
                    tChange.filter(img, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_tChangerOpStateChanged

    private void tChangerOpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tChangerOpFocusGained
        // TODO add your handling code here:
        // TODO add your handling code here:
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImagen(false).getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen(false).copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_tChangerOpFocusGained

    private void tChangerOpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tChangerOpFocusLost
        // TODO add your handling code here:
        imgFuente = null;
    }//GEN-LAST:event_tChangerOpFocusLost

    private String getExtension(File f) {
        FileNameExtensionFilter filtro = (FileNameExtensionFilter) dlg.getFileFilter();
        String name = f.getName();
        String[] extensiones = filtro.getExtensions();
        String ext = "";
        Boolean encontrado = false;
        String item = "";

        for (int i = 0; i < extensiones.length && !encontrado; i++) {
            item = extensiones[i];

            if (name.toLowerCase().endsWith("." + item)) {
                ext = item;
                encontrado = true;
            }
        }

        return ext;
    }
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        // TODO add your handling code here:
        File f = (File) this.listaResproduccion.getSelectedItem();
        JInternalFrame vActual = escritorio.getSelectedFrame();

        if (f != null && !(vActual instanceof VentanaInternaVideo)) {
            if (player == null) {
                player = new SMClipPlayer(f);
            }
            if (player != null) {

                if (player.getClip().getMicrosecondPosition() == 0) {
                    player.addLineListener(new ManejadorAudio());
                    player.play();
                    tiempoPlay.comenzar();
                    play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/pausa24x24.png")));
                } else {
                    if (player.getClip().isRunning()) {
                        player.pause();
                        tiempoPlay.pausar();
                        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/play24x24.png")));
                    } else {
                        player.resume();
                        tiempoPlay.renaudar();
                        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/pausa24x24.png")));
                    }
                }

            }
        } else if(vActual instanceof VentanaInternaVideo){
            if (((VentanaInternaVideo) vActual).isPlaying()) {
                ((VentanaInternaVideo) vActual).pause();
            } else {
                ((VentanaInternaVideo) vActual).play();
            }
        }

    }//GEN-LAST:event_playActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // TODO add your handling code here:
        JInternalFrame vActual = escritorio.getSelectedFrame();
        if (vActual instanceof VentanaInternaVideo) {
            ((VentanaInternaVideo) vActual).stop();
        } else {
            if (player != null) {
                player.stop();
                player = null;
                tiempoPlay.terminar();
            }
            if (recorder != null) {
                recorder.stop();
                tiempo.terminar();
                recorder = null;
            }
        }


    }//GEN-LAST:event_stopActionPerformed

    private void recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                    tiempo.comenzar();
                }

            } catch (Exception ex) {
                System.err.println("Error al guardar la imagen");
            }
        }


    }//GEN-LAST:event_recordActionPerformed

    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
        // TODO add your handling code here:
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance();

        if (vc != null) {
            escritorio.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_camaraActionPerformed

    private void instantaneaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instantaneaActionPerformed
        // TODO add your handling code here:
        VentanaInternaCamara vc = (VentanaInternaCamara) escritorio.getSelectedFrame();

        if (vc != null) {
            BufferedImage img = vc.getImage();
            VentanaInternaImagen vi = new VentanaInternaImagen();
            vi.getLienzo().setImagen(img);
            escritorio.add(vi);
            vi.setVisible(true);
        }

    }//GEN-LAST:event_instantaneaActionPerformed

    private ColorSpace getColorSpace(int seleccion) {
        ColorSpace cs = null;

        switch (seleccion) {
            case 0 -> {
                cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
            }
            case 1 -> {
                cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
            }
            case 2 -> {
                cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
            }
        }

        return cs;
    }

    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    public static LookupTable fFunction(int m) {

        double Max;
        double x;

        if (m >= 128) {
            x = 0.0;
        } else {
            x = 255.0;
        }

        Max = (1.0 / 100.0) * (x - m) * (x - m);

        double K = 255.0 / Max;

        byte lt[] = new byte[256];

        for (int i = 0; i < 256; i++) {
            lt[i] = (byte) (K * (1.0 / 100.0) * (i - m) * (i - m));
        }
        LookupTable slt = new ByteLookupTable(0, lt);

        return slt;
    }

    public static LookupTable tFunction(int a, int b) {
        byte lt[] = new byte[256];
        double m;

        if (a != 255) {
            m = (255.0 - b) / (255.0 - a);
        } else {
            m = 0;
        }

        for (int x = 0; x < 256; x++) {
            if (x < a) {
                lt[x] = (byte) (((double) b / (double) a) * x);
            } else {
                lt[x] = (byte) (m * (x - a) + b);
            }
        }

        LookupTable tlt = new ByteLookupTable(0, lt);
        return tlt;
    }

    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch (seleccion) {
            case 0 -> {
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                /*Para m√°scara 5*5 -> 1/25 = 0.04*/
 /*Para m√°scara 7*7 -> 1/49 ~= 0.02*/
            }
            case 1 -> {
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
            }
            case 2 -> {
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
            }
            case 3 -> {
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
            }
            case 4 -> {
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
            }
            case 5 -> {
                /*
                    Los coeficientes del kernel son todos iguales y se extienden en una direcci√≥n horizontal.
                    Esto quiere decir que se est√° tomando una media de los p√≠xeles vecinos en una direcci√≥n espec√≠fica, 
                    lo que tiene el efecto de suavizar la imagen en esa direcci√≥n (Horizontal en este caso).
                 */
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(5, 1, filtro);
            }
            case 6 -> {
                float filtro[] = {0.142857f, 0.142857f, 0.142857f, 0.142857f, 0.142857f, 0.142857f, 0.142857f};
                k = new Kernel(7, 1, filtro);

            }
            case 7 -> {
                float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
                k = new Kernel(10, 1, filtro);
            }

        }

        return k;
    }

    public class ManejadorVentanaInterna extends InternalFrameAdapter {

        @Override
        public void internalFrameActivated(InternalFrameEvent evt) {
            VentanaInternaImagen vi = (VentanaInternaImagen) evt.getInternalFrame();

            DefaultListModel modelo = new DefaultListModel();
            modelo.addAll(vi.getLienzo().getShapeList());
            lista.setModel(modelo);

            if (vi.getLienzo().getEdicion()) {
                mover.setSelected(true);
            } else {
                Figura f = vi.getLienzo().getFigura();
                if (null != f) {
                    switch (f) {
                        case TLIBRE ->
                            trazo.setSelected(true);
                        case LINEA ->
                            linea.setSelected(true);
                        case RECTANGULO ->
                            rectangulo.setSelected(true);
                        case ELIPSE ->
                            elipse.setSelected(true);
                        case CURVA ->
                            curva.setSelected(true);
                        case CARA ->
                            cara.setSelected(true);
                        default -> {
                        }
                    }

                } else {
                    figura.clearSelection();
                }

            }

            relleno.setSelected(vi.getLienzo().getRellenado());
            transparencia.setSelected(vi.getLienzo().getTransparencia());
            alisado.setSelected(vi.getLienzo().getAlisado());
            grosor.setValue(vi.getLienzo().getGrosor());

        }

        @Override
        public void internalFrameClosing(InternalFrameEvent evt) {
            ((DefaultListModel) lista.getModel()).removeAllElements();
        }
    }

    public class ManejadorLienzo extends LienzoAdapter {

        @Override
        public void shapeAdded(LienzoEvent evt) {
            Shape s = evt.getForma();
            ((DefaultListModel) lista.getModel()).addElement(s);
        }

        @Override
        public void shapeRemoved(LienzoEvent evt) {
            Shape s = evt.getForma();
            ((DefaultListModel) lista.getModel()).removeElement(s);
        }
    }

    class ManejadorAudio implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
            }
            if (event.getType() == LineEvent.Type.STOP) {
                play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPracticaSonido/play24x24.png")));
                if (player.getClip().getMicrosecondPosition() == player.getClip().getMicrosecondLength()) {
                    tiempoPlay.terminar();
                    player = null;
                }
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
                if (tiempoPlay.getSegundos() > 0) {
                    tiempoPlay.terminar();
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AffineTransformOp;
    private javax.swing.JToolBar FormasDibujado;
    private javax.swing.JMenuItem LookUpOp;
    private javax.swing.JButton abrir;
    private javax.swing.JToggleButton alisado;
    private javax.swing.JButton amarillo;
    private javax.swing.JMenu archivo;
    private javax.swing.JButton aumentar;
    private javax.swing.JButton azul;
    private javax.swing.JMenuItem bandCombineOp;
    private javax.swing.JButton bandas;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JButton blanco;
    private javax.swing.JSlider brillo;
    private javax.swing.JButton camara;
    private javax.swing.JToggleButton cara;
    private javax.swing.JMenuItem colorConvertOp;
    private javax.swing.JPanel colores;
    private javax.swing.JButton combinar;
    private javax.swing.JPanel contrast;
    private javax.swing.JSlider contraste;
    private javax.swing.JButton cuadratica;
    private javax.swing.JToggleButton curva;
    private javax.swing.JButton disminuir;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JButton equalizar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox<String> espacioColor;
    private javax.swing.ButtonGroup figura;
    private javax.swing.JComboBox<String> filtros;
    private javax.swing.JSpinner grosor;
    private javax.swing.JButton guardar;
    private javax.swing.JButton iluminar;
    private javax.swing.JButton instantanea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jPlayTiempo;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSlider l1;
    private javax.swing.JSlider l2;
    private javax.swing.JLabel lRecordTiempo;
    private javax.swing.JToggleButton linea;
    private javax.swing.JToggleButton lineal;
    private javax.swing.JList<Shape> lista;
    private javax.swing.JComboBox<File> listaResproduccion;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JToggleButton mover;
    private javax.swing.JButton negro;
    private javax.swing.JButton normal;
    private javax.swing.JButton nuevo;
    private javax.swing.JButton oscurecer;
    private javax.swing.JButton play;
    private javax.swing.JSlider posterizar;
    private javax.swing.JButton record;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JToggleButton relleno;
    private javax.swing.JButton rojo;
    private javax.swing.JButton rojoOp;
    private javax.swing.JButton rotar;
    private javax.swing.JButton sepia;
    private javax.swing.JButton stop;
    private javax.swing.JSlider tChangerOp;
    private javax.swing.JButton tintar;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JToggleButton trazo;
    private javax.swing.JButton verde;
    private javax.swing.JButton volcar;
    // End of variables declaration//GEN-END:variables
}
